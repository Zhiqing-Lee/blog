<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhiqing&#39;s Blog</title>
  
  <subtitle>hello world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhiqing.info/"/>
  <updated>2018-03-29T08:50:28.083Z</updated>
  <id>http://blog.zhiqing.info/</id>
  
  <author>
    <name>Zhiqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Flex布局实现一个聊天界面 (倒叙滚动)</title>
    <link href="http://blog.zhiqing.info/2018/03/29/realize-a-chat-view-with-flex/"/>
    <id>http://blog.zhiqing.info/2018/03/29/realize-a-chat-view-with-flex/</id>
    <published>2018-03-29T07:14:06.000Z</published>
    <updated>2018-03-29T08:50:28.083Z</updated>
    
    <content type="html"><![CDATA[<p>临近毕业，马上就要离开生活了四年的大学。却被找工作、毕业设计等事情困扰着的我流下了没有技术的泪水T_T</p><p>毕业设计选题选了一个《基于Web的IM应用的设计与实现》，技术栈打算使用 Vue + Java + WebSocket ，不过后面可能会把Java换成Nodejs。</p><p>在写前端页面时，为了写得爽，全面使用了Flex布局，也就不考虑兼容IE什么的了。写到聊天的界面时，发现Flex布局的 <code>flex-direction: column-reverse;</code> 简直是为这种情况量身定制的。上拉读取聊天记录时直接按时间倒叙查询，然后向消息数组里push就是了，逻辑很明确。</p><p>实现了以后更是发现使用 <code>flex-direction: column-reverse;</code> 后默认显示的是列表的底部，这就更完美了，都不用手动滚动到底部了。</p><p>一切都还很美好，直到我一时兴起用 Edge 打开了我的毕业设计，看看有没有什么兼容性问题时。发现这个聊天界面在 Edge 上完全是不能滚动的！！！然后默默地打开了 Firefox ，发现问题一样的存在-_-！</p><p>马上 Google 搜索一下，发现不止是我一个人遇到过这样的问题 (果然我不是天选之人， Bug之下人人平等)。</p><p><img src="/images/flex-chat1.png" alt="Flex-chat1"></p><p>据搜索结果里的人所说，这在Firefox中是一个 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1042151" target="_blank" rel="noopener">已知问题</a> 。这下没办法了，必须要解决这个问题。本来就已经放弃IE支持，不可能再放弃Edge和Firefox的支持吧，那样的话要这个应用还有什么用。</p><p>搜索结果里的解决方案是在消息列表的外面再套一层容器，既然消息列表不能滚动，那就让它外面的容器可滚动。代码大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"messages"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span> Message 1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span> Message 2 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span> Message 3 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span> Message 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span> Message 5 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* in style */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.messages</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">backgorund</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做是都可以滚动了，但是像QQ、微信这样，聊天界面都是最后一条消息在最下面，默认展示的也是最后一条消息,及滚动方式是从底部向上滚动。用这种实现方式就必须在页面加载完成（对应Vue组件的是数据加载完成并绑定到页面上）后手动地滚动该容器到底部了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in script</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span><br><span class="line">  container.scrollTop = container.scrollHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的展示效果可以 <a href="https://codepen.io/zhiqing/pen/BrYJoZ" target="_blank" rel="noopener">点击这里</a> 查看</p><p>至此，就实现了一个类似微信聊天界面的页面（虽说有点简陋）。感兴趣的可以查看我的 <a href="https://github.com/zhiqing-lee/WebChat" target="_blank" rel="noopener">毕业设计</a> 里的实现，效果如下，看起来还是要高大上一点的。</p><p><img src="/images/flex-chat2.jpg" alt="Chat"></p><p>不过实现了过后再想想，用 <code>flex-direction: column-reverse;</code> 方式和 <code>flex-direction: column;</code> 方式实现区别并不大。无非是在添加数据时用 <code>push</code> 方法还是 <code>unshift</code> 方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;临近毕业，马上就要离开生活了四年的大学。却被找工作、毕业设计等事情困扰着的我流下了没有技术的泪水T_T&lt;/p&gt;
&lt;p&gt;毕业设计选题选了一个《基于Web的IM应用的设计与实现》，技术栈打算使用 Vue + Java + WebSocket ，不过后面可能会把Java换成Nod
      
    
    </summary>
    
      <category term="Web" scheme="http://blog.zhiqing.info/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.zhiqing.info/tags/Web/"/>
    
      <category term="Flex" scheme="http://blog.zhiqing.info/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>通过Systemd让SSR开机自启动</title>
    <link href="http://blog.zhiqing.info/2017/12/25/start-up-ssr-with-systemd/"/>
    <id>http://blog.zhiqing.info/2017/12/25/start-up-ssr-with-systemd/</id>
    <published>2017-12-25T08:27:57.000Z</published>
    <updated>2018-01-08T12:44:08.676Z</updated>
    
    <content type="html"><![CDATA[<p>果然，之前让项目支持部署到Docker这个决定是很正确的。这不，又把系统从Windows换成了Linux。而原因竟然是我的笔记本在Windows下玩游戏会无限崩溃，而在Linux下不会！！！用Linux是为了玩游戏我恐怕还是第一人吧!既然装Linux是为了玩游戏，那么也没有必要双系统了，毕竟个人感觉Linux下搞开发还是比Windows爽很多的。不过还是吐槽一下Linux上玩游戏的确还是没有Windows上流畅，可能是因为显卡驱动程序太旧了吧。</p><p>装上新系统第一件事当时然是解决科学上网。之前一直是用的SS，Linux下也有QT版的GUI客户端，用着还不错。可是在之前用Windows的时间里，SS被封了。于是换成了魔改版的SSR，Windows下也有GUI客户端，用着还不错。可是一换到Linux下，SSR好像没有GUI客户端。只好用CLI客户端，反正又这程序开着基本上看不着，开机时启动、关机时关闭。那么问题来了，不可能每次开机时手动开启吧，得让它开机时自启动啊。</p><p>之前试过在 <code>/etc/profile</code> 文件中添加命令以达到自启动的目的，但是会出现一些小问题。使用 <code>source</code> 命令时会再启动一次该程序。SSR的服务端是使用的Supervisor来管理的，但是又不想在电脑中多装软件。于是想到还有个Systemd。</p><p>好了，说了这么多废话开始正题吧。</p><p>首先在 <code>/etc/systemd/system</code> 目录中新建名为 <code>ssr.service</code> 的配置文件，并写入以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Started SSR Service</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python /home/zhiqing/App/shadowsocksr/shadowsocks/local.py -c /etc/ssr.json</span><br></pre></td></tr></table></figure><blockquote><p>自行修改其中ExecStart项的值，注意必须使用绝对目录写法。</p></blockquote><p>这样就在Systemd中添加了一个服务。<br>接着在命令行中输入 <code>systemctl enable ssr</code> 就可以让该服务启用开机自启。<br>使用 <code>systemctl start ssr</code> 可立即启动服务。<br>使用 <code>systemctl stop ssr</code> 可停止该服务。（不过这里没有写停止服务的命令，应该是不能用的）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;果然，之前让项目支持部署到Docker这个决定是很正确的。这不，又把系统从Windows换成了Linux。而原因竟然是我的笔记本在Windows下玩游戏会无限崩溃，而在Linux下不会！！！用Linux是为了玩游戏我恐怕还是第一人吧!既然装Linux是为了玩游戏，那么也没有
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.zhiqing.info/tags/Linux/"/>
    
      <category term="SSR" scheme="http://blog.zhiqing.info/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>在Java开发中使用Docker</title>
    <link href="http://blog.zhiqing.info/2017/11/28/develop-java-web-with-docker/"/>
    <id>http://blog.zhiqing.info/2017/11/28/develop-java-web-with-docker/</id>
    <published>2017-11-28T12:40:27.000Z</published>
    <updated>2018-01-08T12:44:08.670Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客中提到，最近在写一个Java Web应用，因为某些原因换了开发环境，然后折腾了半天。于是就想起来使用Docker来搭建开发环境，妈妈以后就再也不用担心我开发中途换环境了！搭建过程还是比较顺利的，现在来记录一下如何将基于Maven的Java项目部署到Docker。如果不是基于Maven的项目，可参考该博客进行相应的修改。</p><h2 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1.安装Docker"></a>1.安装Docker</h2><p>这一步不用多说什么，直接进入<a href="https://www.docker.com/" target="_blank" rel="noopener">官网</a>按照提示安装即可。Linux 需要单独安装 Docker Compose 。 Mac OS 和 Windows版的Docker安装包里已经内置了 Docker Compose， 不用单独安装。</p><h2 id="2-添加并修改配置文件"><a href="#2-添加并修改配置文件" class="headerlink" title="2.添加并修改配置文件"></a>2.添加并修改配置文件</h2><p>在应用根目录里添加 <code>config</code> 目录，然后复制Tomcat的 <code>Server.xml</code> 配置文件到该目录。然后根据自己的需求修改该配置文件。</p><blockquote><p>因为本人习惯于将应用部署到Tomcat根目录，所以需要修改Tomcat配置文件。而Docker容器里直接修改配置文件不是很方便，所以新建一个配置文件用于替换容器里的配置文件。如使用默认配置文件即可跳过这步。</p></blockquote><h2 id="3-编写-Dockerfile-文件"><a href="#3-编写-Dockerfile-文件" class="headerlink" title="3. 编写 Dockerfile 文件"></a>3. 编写 <code>Dockerfile</code> 文件</h2><p>在应用根目录中添加 <code>Dockerfile</code> 文件，并写入一下内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8.0</span>-jre8-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Tomcat默认根目录，可根据自己需求保留或删除</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 替换Tomcat配置文件，可根据自己需求修改或删除</span></span></span><br><span class="line"><span class="bash">COPY ./config/server.xml /usr/<span class="built_in">local</span>/tomcat/conf/server.xml</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 挂载应用目录，根据自己需求修改，需与Tomcat配置文件一致</span></span></span><br><span class="line"><span class="bash">VOLUME /usr/<span class="built_in">local</span>/tomcat/webapps/forus/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 暴露8080端口</span></span></span><br><span class="line"><span class="bash">EXPOSE 8080</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 运行Tomcat，并启用远程调试</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"catalina.sh"</span>, <span class="string">"jpda"</span>, <span class="string">"run"</span>]</span></span><br></pre></td></tr></table></figure><p>在应用根目录下添加 <code>.dockerignore</code> 文件。该文件与 <code>.gitignore</code> 类似，用于避免将某些文件添加到创建Docker镜像时的上下文。在其中添加除了 <code>config</code> 目录之外的其他目录及文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">.idea/</span><br><span class="line">target/</span><br></pre></td></tr></table></figure><blockquote><p>可以将 <code>config</code> 目录及 <code>Dockerfile</code> 添加到另一个目录中来避免 <code>.dockerignore</code> 文件</p></blockquote><h2 id="4-编写-docker-compose-yml-文件"><a href="#4-编写-docker-compose-yml-文件" class="headerlink" title="4. 编写 docker-compose.yml 文件"></a>4. 编写 <code>docker-compose.yml</code> 文件</h2><p>因为自己的项目用到了Mysql和Redis，需要运行多个服务容器。所以用了Docker Compose 来管理这些服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2.3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3306"</span>                      <span class="comment"># Mysql 服务端口</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span>  <span class="comment"># Mysql root 用户密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:alpine</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"6379"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  forus:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">spring.profiles.active=test</span> <span class="comment"># 激活 Spring 的 Profile</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">JPDA_ADDRESS=0.0.0.0:8000</span>   <span class="comment"># 远程调试地址</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./target/forus/:/usr/local/tomcat/webapps/forus/</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span>   <span class="comment"># 应用端口映射</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8000:8000"</span>   <span class="comment"># 远程调试端口映射</span></span><br></pre></td></tr></table></figure><h2 id="5-运行-调试"><a href="#5-运行-调试" class="headerlink" title="5. 运行/调试"></a>5. 运行/调试</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 在应用根目录下运行 `mvn war:exploded` 命令编译项目。</span><br><span class="line"></span><br><span class="line">2. 运行 `docker-compose up` 命令构建镜像并运行相应服务。</span><br><span class="line"></span><br><span class="line">3. 在浏览器中打开 `localhost:8080` 即可访问该应用。</span><br><span class="line"></span><br><span class="line">4. 在应用根目录下运行 `docker-compose down` 命令可停止相应服务并删除相关容器和镜像。</span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过远程调试的方式连接到 `localhost:8000&apos; 可进行调试。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客中提到，最近在写一个Java Web应用，因为某些原因换了开发环境，然后折腾了半天。于是就想起来使用Docker来搭建开发环境，妈妈以后就再也不用担心我开发中途换环境了！搭建过程还是比较顺利的，现在来记录一下如何将基于Maven的Java项目部署到Docker。如
      
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.zhiqing.info/tags/Java/"/>
    
      <category term="Docker" scheme="http://blog.zhiqing.info/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>部署Java Web应用到Tomcat的根目录</title>
    <link href="http://blog.zhiqing.info/2017/11/21/deploy-java-web-to-tomcat-root/"/>
    <id>http://blog.zhiqing.info/2017/11/21/deploy-java-web-to-tomcat-root/</id>
    <published>2017-11-21T02:09:06.000Z</published>
    <updated>2018-01-08T12:44:08.668Z</updated>
    
    <content type="html"><![CDATA[<p>之前写Java Web应用都是用的Spring Boot，直接生成 <code>jar</code> 文件进行执行，部署方面的一些细节Spring Boot基本都帮我搞定了。最近再写一个论坛程序时，突然就不想用Spring Boot了。最后采用了XML方式配置了SSM环境。顺便熟悉一下Spring相关配置文件的细节（学了以后基本没用过，已经忘得差不多了）。</p><p>因为某些原因，中途开发环境从Ubuntu转到了Windows。转到Windows后又因跟校实习中断了一段时间。回校后运行项目时发现Redis服务打不开了。于是就想着干脆直接上Docker算了，免得下次换开发环境又出各种问题。</p><p>因为开发时一直用的IDEA，配置好Tomcat后默认是部署到根目录的，使用Spring Boot时也是在根目录。所以开发时基本都是用的绝对路径或相对路径，没有使用上下文路径的习惯。如果直接复制war包多出来一个上下文怕是要出问题。</p><p>于是Google了一下如何将war包部署到Tomcat根目录，对比了多个博客，终于还是弄出来了。</p><p>这次先记录一下部署到Tomcat，下次再记录部署到Docker。</p><h2 id="1-重新指定目录"><a href="#1-重新指定目录" class="headerlink" title="1.重新指定目录"></a>1.重新指定目录</h2><ol><li><p>新建一个目录用于存放应用的目录，并将war包放入其中。这种方法不会破坏Tomcat默认目录。</p></li><li><p>和上面一样在配置文件 <code>$CATALINA_HOME/conf/server.xml</code> 中找到如下结点 (<code>$CATALINA_HOME</code>为Tomcat安装目录)</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>修改该该结点的 <code>appBase</code> 值为上面创建的目录，如该目录位于 <code>$CATALINA_HOME</code> 中，可以直接写相对路径。</p></li><li><p>在 <code>2</code> 中的结点里添加一个子结点：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"folder"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"appname"</span> <span class="attr">debug</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>appname</code> 为应用名，及放入 <code>folder</code> 中的war包名。</p><p>启动Tomcat后，访问即可通过指定的地址及端口(<code>http://localhost:8080</code>)的根目录访问到刚刚部署的应用。</p><h2 id="2-替换默认文件"><a href="#2-替换默认文件" class="headerlink" title="2.替换默认文件"></a>2.替换默认文件</h2><ol><li>移动 <code>$CATALINA_HOME/webapps/ROOT</code> 目录到 <code>$CATALINA_HOME/webapps/ROOT_BAK</code></li></ol><p>这一步我在网上搜到的是删除 <code>ROOT</code> 目录里的所有内容，但我测试时必须要删除整个目录才生效。应该和Tomcat版本有关。</p><ol><li>在Tomcat配置文件 <code>$CATALINA_HOME/conf/server.xml</code> 中找到如下代码：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在 <code>2</code> 中的结点里添加一个子结点：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"appname"</span> <span class="attr">debug</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样部署会破坏Tomcat的默认主页</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>虽然说写的是两种方式，但其原理并没有区别。只是一个使用了Tomcat默认的目录，一个没使用而已。重要的是理解其中几个属性的用法。</p><ol><li><p><code>appBase</code> 的值为存放app的目录，<code>Host</code> 的子结点 <code>Context</code> 中的 <code>docBase</code> 的值是相对于它的。该值可以使用绝对目录或相对目录。使用相对目录时是相对于 <code>$CATALINA_HOME</code> 目录的。</p></li><li><p><code>path</code> 配置该上下文的路径，如为空则为根目录。</p></li><li><p><code>docBase</code> 的值为具体应用的路径，可以设置为war包或者一个目录。可以使用相对路径或绝对路径。相对路径相对于 <code>appBase</code> 的值。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前写Java Web应用都是用的Spring Boot，直接生成 &lt;code&gt;jar&lt;/code&gt; 文件进行执行，部署方面的一些细节Spring Boot基本都帮我搞定了。最近再写一个论坛程序时，突然就不想用Spring Boot了。最后采用了XML方式配置了SSM环境。
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.zhiqing.info/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.zhiqing.info/tags/Java/"/>
    
      <category term="Tomcat" scheme="http://blog.zhiqing.info/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记：volley初试</title>
    <link href="http://blog.zhiqing.info/2016/07/24/android-learning-volley/"/>
    <id>http://blog.zhiqing.info/2016/07/24/android-learning-volley/</id>
    <published>2016-07-23T16:00:00.000Z</published>
    <updated>2018-01-08T12:44:08.666Z</updated>
    
    <content type="html"><![CDATA[<p>Volley是一个Android的HTTP库，用于方便地执行网络操作。</p><p>Volley不适用与下载很大的文件。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="Clone-仓库源码到本地-需翻墙-："><a href="#Clone-仓库源码到本地-需翻墙-：" class="headerlink" title="Clone 仓库源码到本地(需翻墙)："></a>Clone 仓库源码到本地(需翻墙)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://android.googlesource.com/platform/frameworks/volley</span><br></pre></td></tr></table></figure><h3 id="导入Volley"><a href="#导入Volley" class="headerlink" title="导入Volley"></a>导入Volley</h3><ol><li>在Android Studio中选择<code>File</code> -&gt; <code>New</code> -&gt; <code>Import Module</code></li><li>在弹出的对话框中的<code>Source directory</code>栏中选择刚刚Clone到本地的文件夹</li><li>在Module name中输入模块名（默认为<code>:volley</code>)</li></ol><p><img src="/images/android-import-volley.png" alt="volley"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li>代码方式：在<code>build.gradle (Module: app)</code>文件中的<code>dependencies</code>部分加入<code>compile project(&#39;:volley&#39;)</code>(其中<code>:volley</code>为导入模块时输入的名字)：</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:23.4.0'</span></span><br><span class="line">    compile project(<span class="string">':volley'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 Android Studio 中选择 <code>File</code> -&gt; <code>Project Structure</code>，在<code>Modules</code>中选中<code>app</code>，然后选择<code>Dependencies</code>，单击右边绿色的<code>+</code>，选择<code>Module dependency</code>，选择刚刚导入的模块(<code>:volley</code>)。</li></ul><h3 id="添加INTERNET权限"><a href="#添加INTERNET权限" class="headerlink" title="添加INTERNET权限"></a>添加INTERNET权限</h3><p>在<code>manifest</code>文件中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求队列"><a href="#请求队列" class="headerlink" title="请求队列"></a>请求队列</h2><p>使用 Volley 的方式是，创建一个 RequestQueue 并传递 Request 对象给它。RequestQueue 管理用来执行网络操作的工作线程、从缓存中读取数据、写数据到缓存、并解析 Http 的响应内容。Volley 会把解析完的响应数据分发给主线程。</p><h3 id="使用Volley-newRequestQueue"><a href="#使用Volley-newRequestQueue" class="headerlink" title="使用Volley.newRequestQueue"></a>使用Volley.newRequestQueue</h3><p>Volley 提供了一个便捷方法 <code>Volley.newRequestQueue()</code> 来创建 RequestQueue：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TextView mTextView = (TextView) findViewById(R.id.text_view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个RequestQueue</span></span><br><span class="line">RequestQueue queue = Volley.newRequestQueue(<span class="keyword">this</span>);</span><br><span class="line">String url =<span class="string">"http://baidu.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个StringRequest，请求响应结果为String</span></span><br><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Request.Method.GET, url,</span><br><span class="line">            <span class="keyword">new</span> Response.Listener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 显示响应结果到一个TextView</span></span><br><span class="line">        mTextView.setText(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当遇到错误时显示'Error!'</span></span><br><span class="line">        mTextView.setText(<span class="string">"Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 添加该请求到请求队列</span></span><br><span class="line">queue.add(stringRequest);</span><br></pre></td></tr></table></figure><h3 id="创建自定义请求队列"><a href="#创建自定义请求队列" class="headerlink" title="创建自定义请求队列"></a>创建自定义请求队列</h3><h4 id="设置网络和缓存"><a href="#设置网络和缓存" class="headerlink" title="设置网络和缓存"></a>设置网络和缓存</h4><p>RequestQueue需要两部分来支持工作：网络(Network)和缓存(Cache)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RequestQueue mRequestQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓存</span></span><br><span class="line">Cache cache = <span class="keyword">new</span> DiskBasedCache(getCacheDir(), <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置网络使用HttpURLConnection类作为HTTP客户端。</span></span><br><span class="line">Network network = <span class="keyword">new</span> BasicNetwork(<span class="keyword">new</span> HurlStack());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用创建的缓存和网络来实例化一个请求队列</span></span><br><span class="line">mRequestQueue = <span class="keyword">new</span> RequestQueue(cache, network);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启队列</span></span><br><span class="line">mRequestQueue.start();</span><br><span class="line"></span><br><span class="line">String url =<span class="string">"http://www.example.com"</span>;</span><br><span class="line"></span><br><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Request.Method.GET, url,</span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do something with the response</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求到请求队列</span></span><br><span class="line">mRequestQueue.add(stringRequest);</span><br></pre></td></tr></table></figure><h4 id="使用单例模式"><a href="#使用单例模式" class="headerlink" title="使用单例模式"></a>使用单例模式</h4><p>一个提供了RequestQueue和ImageLoader的单例类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton mInstance;</span><br><span class="line">    <span class="keyword">private</span> RequestQueue mRequestQueue;</span><br><span class="line">    <span class="keyword">private</span> ImageLoader mImageLoader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context mCtx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mCtx = context;</span><br><span class="line">        mRequestQueue = getRequestQueue();</span><br><span class="line"></span><br><span class="line">        mImageLoader = <span class="keyword">new</span> ImageLoader(mRequestQueue,</span><br><span class="line">                <span class="keyword">new</span> ImageLoader.ImageCache() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> LruCache&lt;String, Bitmap&gt;</span><br><span class="line">                    cache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(url);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBitmap</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">                cache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MySingleton <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> MySingleton(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addToRequestQueue</span><span class="params">(Request&lt;T&gt; req)</span> </span>&#123;</span><br><span class="line">        getRequestQueue().add(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageLoader <span class="title">getImageLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mImageLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个单例类的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个请求队列</span></span><br><span class="line">RequestQueue queue = MySingleton.getInstance(<span class="keyword">this</span>.getApplicationContext()).</span><br><span class="line">    getRequestQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个请求到请求队列</span></span><br><span class="line">MySingleton.getInstance(<span class="keyword">this</span>).addToRequestQueue(stringRequest);</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><ol><li><p>为Request设置标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyTag"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为请求设置标签</span></span><br><span class="line">stringRequest.setTag(TAG);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求到请求队列</span></span><br><span class="line">mRequestQueue.add(stringRequest);</span><br></pre></td></tr></table></figure></li><li><p>在Activiy的onStop()方法中取消包含该标签的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    <span class="keyword">if</span> (mRequestQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRequestQueue.cancelAll(TAG);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="Request生命周期"><a href="#Request生命周期" class="headerlink" title="Request生命周期"></a>Request生命周期</h3><p><img src="/images/volley-request.png" alt="volley生命周期"></p><h3 id="创建标准请求"><a href="#创建标准请求" class="headerlink" title="创建标准请求"></a>创建标准请求</h3><p>Volley 的几种种常用的请求：</p><ul><li><code>StringRequest</code>: 指定一个URL并且接收字符串类型的响应数据</li><li><code>ImageRequset</code>: 指定一个URL并且接收图片类型的响应数据</li><li><code>JsonObjectRequest</code>和<code>JsonArrayRequest</code>: 指定一个URL并且接收Json对象(数组)类型的响应数据</li></ul><h4 id="请求图片"><a href="#请求图片" class="headerlink" title="请求图片"></a>请求图片</h4><h5 id="使用ImageRequset"><a href="#使用ImageRequset" class="headerlink" title="使用ImageRequset"></a>使用ImageRequset</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ImageView mImageView;</span><br><span class="line">String url = <span class="string">"http://zhiqing.info/images/logo.png"</span>;</span><br><span class="line">mImageView = (ImageView) findViewById(R.id.image_view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据URL请求图片并显示到用户界面</span></span><br><span class="line">ImageRequest request = <span class="keyword">new</span> ImageRequest(url,</span><br><span class="line">    <span class="keyword">new</span> Response.Listener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">            mImageView.setImageBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">            mImageView.setImageResource(R.drawable.image_load_error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 通过单例类取得RequestQueue并将图片请求添加到RequestQueue</span></span><br><span class="line">MySingleton.getInstance(<span class="keyword">this</span>).addToRequestQueue(request);</span><br></pre></td></tr></table></figure><h5 id="使用-ImageLoader-和-NetworkImageView"><a href="#使用-ImageLoader-和-NetworkImageView" class="headerlink" title="使用 ImageLoader 和 NetworkImageView"></a>使用 ImageLoader 和 NetworkImageView</h5><p>使用ImageLoader显示图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ImageLoader mImageLoader;</span><br><span class="line">ImageView mImageView;</span><br><span class="line"><span class="comment">// The URL for the image that is being loaded.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE_URL =</span><br><span class="line">    <span class="string">"http://developer.android.com/images/training/system-ui.png"</span>;</span><br><span class="line">mImageView = (ImageView) findViewById(R.id.regularImageView);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the ImageLoader through your singleton class.</span></span><br><span class="line">mImageLoader = MySingleton.getInstance(<span class="keyword">this</span>).getImageLoader();</span><br><span class="line">mImageLoader.get(IMAGE_URL, ImageLoader.getImageListener(mImageView,</span><br><span class="line">         R.drawable.def_image, R.drawable.err_image));</span><br></pre></td></tr></table></figure><p>使用NetworkImageView：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.android.volley.toolbox.NetworkImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/networkImageView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"170dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ImageLoader mImageLoader;</span><br><span class="line">NetworkImageView mNetworkImageView;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE_URL =</span><br><span class="line">    <span class="string">"http://developer.android.com/images/training/system-ui.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the NetworkImageView that will display the image.</span></span><br><span class="line">mNetworkImageView = (NetworkImageView) findViewById(R.id.networkImageView);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the ImageLoader through your singleton class.</span></span><br><span class="line">mImageLoader = MySingleton.getInstance(<span class="keyword">this</span>).getImageLoader();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the URL of the image that should be loaded into this view, and</span></span><br><span class="line"><span class="comment">// specify the ImageLoader that will be used to make the request.</span></span><br><span class="line">mNetworkImageView.setImageUrl(IMAGE_URL, mImageLoader);</span><br></pre></td></tr></table></figure><h4 id="请求Json"><a href="#请求Json" class="headerlink" title="请求Json"></a>请求Json</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TextView mTxtDisplay;</span><br><span class="line">ImageView mImageView;</span><br><span class="line">mTxtDisplay = (TextView) findViewById(R.id.txtDisplay);</span><br><span class="line">String url = <span class="string">"http://my-json-feed"</span>;</span><br><span class="line"></span><br><span class="line">JsonObjectRequest jsObjRequest = <span class="keyword">new</span> JsonObjectRequest</span><br><span class="line">        (Request.Method.GET, url, <span class="keyword">null</span>, <span class="keyword">new</span> Response.Listener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;</span><br><span class="line">        mTxtDisplay.setText(<span class="string">"Response: "</span> + response.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Access the RequestQueue through your singleton class.</span></span><br><span class="line">MySingleton.getInstance(<span class="keyword">this</span>).addToRequestQueue(jsObjRequest);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Volley是一个Android的HTTP库，用于方便地执行网络操作。&lt;/p&gt;
&lt;p&gt;Volley不适用与下载很大的文件。&lt;/p&gt;
&lt;h2 id=&quot;开始使用&quot;&gt;&lt;a href=&quot;#开始使用&quot; class=&quot;headerlink&quot; title=&quot;开始使用&quot;&gt;&lt;/a&gt;开始使用&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://blog.zhiqing.info/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.zhiqing.info/tags/Android/"/>
    
      <category term="Code" scheme="http://blog.zhiqing.info/tags/Code/"/>
    
      <category term="Volley" scheme="http://blog.zhiqing.info/tags/Volley/"/>
    
  </entry>
  
  <entry>
    <title>《Linux pocket guide》读书笔记之二：Shell特性</title>
    <link href="http://blog.zhiqing.info/2016/07/20/linux-pocket-guide-2/"/>
    <id>http://blog.zhiqing.info/2016/07/20/linux-pocket-guide-2/</id>
    <published>2016-07-19T16:00:00.000Z</published>
    <updated>2018-01-08T12:44:08.674Z</updated>
    
    <content type="html"><![CDATA[<p>使用Linux操作系统时，通常是在一个叫Shell的东西里输入命令然后敲入回车，从而让Linux执行相应的程序。比如在Shell中输入<code>who</code>然后敲入回车，系统将会输出有哪些用户在什么地方登录了该计算机。</p><ul><li><code>|</code> 为管道符，用于链接两条命令，作用是将第一条命令的输出作为第二条命令的输入。如<code>who | wc -l</code>将会显示当前有多少用户登录了该计算机（<code>wc -l</code>命令的功能为显示输入数据的行数）。</li><li><code>echo $SHELL</code> 可以显示shell的类型，大多数linux发型版都默认为bash(the Bourne-Again Shell)，输出为<code>/bin/bash</code>。</li><li><code>exit</code> 退出当前shell</li></ul><h2 id="Shell命令对应的程序"><a href="#Shell命令对应的程序" class="headerlink" title="Shell命令对应的程序"></a>Shell命令对应的程序</h2><p>当你输入一条命令时，实际上是调用了一个linux程序或者是一条内置的命令。可以使用<code>type</code>命令显示一个命令的类型或程序的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> who  <span class="comment">#输出: who is /usr/bin/who</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">cd</span>  <span class="comment">#输出: cd is a shell builtin</span></span><br></pre></td></tr></table></figure><h2 id="bash的特点"><a href="#bash的特点" class="headerlink" title="bash的特点"></a>bash的特点</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符是用来代替一个或多个字符的符号，例如：<code>a*</code>的意思是所有以字符<code>a</code>开头的文件。如果在shell中输入<code>ls a*</code>会显示当前文件夹下所有以<code>a</code>开头的文件。和输入<code>ls apple applet ada</code>效果相同。</p><blockquote><p>ls命令并不知道你使用了通配符，通配符是由shell处理的，所以原则上每个命令都能使用通配符。</p></blockquote><p>点文件：</p><blockquote><p>点文件是指文件名以英文句点开头的文件，如：<code>.profile</code>。这种文件在很多程序中默认是不可见的，也被称为隐藏文件</p><ul><li><code>ls</code> 命令默认不显示点文件，除非加上<code>-a</code>选项</li><li>shell的通配符不匹配点文件</li></ul></blockquote><p>通配符：</p><ul><li><code>*</code> 零个或多个字符</li><li><code>?</code> 单个字符</li><li><code>[set]</code> 给定集合中的任意字符，如:<code>[aeiouAEIOU]</code>将匹配任意一个元音字母，也可以给定一个范围，如:<code>[A-Z]</code>将匹配任意一个大写字母</li><li><code>[^set]</code> 匹配任意一个不在给定集合中的字符，如<code>[^0-9]</code>就爱那个匹配一个不是数字的字符</li><li><code>[!set]</code> 同<code>[^set]</code></li></ul><h3 id="大括号匹配"><a href="#大括号匹配" class="headerlink" title="大括号匹配"></a>大括号匹配</h3><p>和通配符类似，大括号里的表达式将会被分为多个参数传给命令：</p><p><code>{X,YY,ZZZ}</code></p><p>shell会分别把X、YY、ZZZ传给命令行，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> sand&#123;X,YY,ZZZ&#125;wich  </span><br><span class="line"><span class="comment">#输出：sandXwich sandYYwich sandZZZwich</span></span><br></pre></td></tr></table></figure><h3 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h3><p>你可以定义变量并赋值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYVAR=3</span><br></pre></td></tr></table></figure><p>通过美元符号加变量名可以取出变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$MYVAR</span>  <span class="comment">#输出： 3</span></span><br></pre></td></tr></table></figure><p>在启动shell之前系统通常会帮你定义的一些变量：</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>DISPLAY</td><td>显示器名称</td></tr><tr><td>HOME</td><td>家目录地址，如：<code>/home/zhiqing</code></td></tr><tr><td>LOGNAME</td><td>登录的用户名，如：<code>zhiqing</code></td></tr><tr><td>OLDPWD</td><td>上一个<code>cd</code>命令执行之前的目录</td></tr><tr><td>PATH</td><td>shell搜索路径，用<code>:</code>分隔的目录</td></tr><tr><td>PWD</td><td>当前目录</td></tr><tr><td>SHELL</td><td>shell的路径，如：<code>/bin/bash</code></td></tr><tr><td>TERM</td><td>终端的类型，如：<code>xterm</code></td></tr><tr><td>USER</td><td>当前登录的用户名</td></tr></tbody></table><p>变量的作用域一般是默认是当前Shell，如果想让其他shell和程序也能调用该变量，需使用<code>export</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYVAR=3</span><br><span class="line"><span class="built_in">export</span> MYVAR  </span><br><span class="line"><span class="built_in">export</span> MYVAR2=3  <span class="comment">#功能和上两行一样</span></span><br></pre></td></tr></table></figure><p>这样的变量叫做<code>环境变量(environment variable)</code>,通过<code>printenv</code>命令可以输出环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printenv  <span class="comment">#输出所有环境变量</span></span><br><span class="line">printenv HOME  <span class="comment">#输出单个环境变量，输出：`/home/zhiqing`</span></span><br><span class="line">HOME=/home/tom printenv HOME  <span class="comment">#输出:`/home/tom`</span></span><br><span class="line">printenv HOME  <span class="comment">#输出：`/home/zhiqing`</span></span><br></pre></td></tr></table></figure><p>如上所示，如需临时改变环境变量的值，可在命令前加上<code>变量=值</code>。</p><h3 id="搜索路径-PATH"><a href="#搜索路径-PATH" class="headerlink" title="搜索路径(PATH)"></a>搜索路径(PATH)</h3><p>Linux系统中的程序存放在各种各样的目录中，如<code>/bin</code>、<code>/usr/bin</code>、<code>/opt/java/jdk/bin</code>。为了方便shell能够正确找到该程序，shell提供了<code>PATH</code>环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>  <span class="comment">#输出：`/usr/local/bin:/bin:/usr/bin`</span></span><br></pre></td></tr></table></figure><p>如上所示，PATH中的值是用<code>:</code>分隔的多个目录。shell执行程序时会在这些目录中一个一个地查找，找到了便运行该程序，否则提示<code>bash: who: command not found</code>。</p><p>你也可以添加自己的程序目录到环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/home/zhiqing/prog</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>  </span><br><span class="line"><span class="comment">#输出:`/usr/local/bin:/bin:/usr/bin:/homae/zhiqing/prog`</span></span><br></pre></td></tr></table></figure><p>这样只会影响当前shell，在<code>~/.bash_profile</code>文件中设置PATH变量可使以后每次开启Shell自动设置。</p><h3 id="别名-Aliases"><a href="#别名-Aliases" class="headerlink" title="别名(Aliases)"></a>别名(Aliases)</h3><p>可以使用内置的<code>alias</code>命令为长命令创建别名以方便记忆和输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -lG'</span></span><br><span class="line">ll  <span class="comment">#此时`ll`与`ls -lG`的输出相同</span></span><br></pre></td></tr></table></figure><p>在<code>~/.bash_profile</code>中定义别名，可以使以后登录后直接使用你定义的别名。</p><h3 id="输入-输出重定向"><a href="#输入-输出重定向" class="headerlink" title="输入/输出重定向"></a>输入/输出重定向</h3><p>Shell可以把<code>srandard input(标准输入)</code>、<code>srandard output(标准输出)</code>、<code>srandard error(标准错误输出)</code>重定向到文件或从文件重定向：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; infile  <span class="comment">#重定向文件到标准输入</span></span><br><span class="line"><span class="built_in">command</span> &gt; outfile  <span class="comment">#重定向标准输出到一个文件（创建新文件/覆盖就文件）</span></span><br><span class="line"><span class="built_in">command</span> &gt;&gt; outfile  <span class="comment">#重定向标准输出到一个文件（追加到文件之后）</span></span><br><span class="line"><span class="built_in">command</span> 2&gt; errorfile  <span class="comment">#重定向标准错误输出到文件</span></span><br><span class="line"><span class="built_in">command</span> &gt; outfile 2&gt; errorfile  </span><br><span class="line"><span class="comment">#分别重定向标准输出和标准错误输出到不同的文件</span></span><br><span class="line"><span class="built_in">command</span> &gt;&amp; outfile</span><br><span class="line"><span class="built_in">command</span> &amp;&gt; outfile</span><br><span class="line"><span class="comment">#以上两个均为重定向标准输出和标准错误输出到一个共同的文件</span></span><br></pre></td></tr></table></figure><h3 id="管道-Pipes"><a href="#管道-Pipes" class="headerlink" title="管道(Pipes)"></a>管道(Pipes)</h3><p>使用管道(<code>|</code>)你可以重定向一条命令的标准输出到另一条命令的标准输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls | wc -l  <span class="comment">#输出当前目录下的文件个数</span></span><br><span class="line">ls | wc -l | cowsay  <span class="comment">#让一只母牛说出当前目录下的文件个数</span></span><br></pre></td></tr></table></figure><h3 id="子过程"><a href="#子过程" class="headerlink" title="子过程"></a>子过程</h3><p>与管道类似，使用子过程<code>&lt;(command)</code>可以把一条命令的输出以文件的形式重定向到另一条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;(ls | wc -l | cowsay)</span><br><span class="line"><span class="comment">#让一只母牛说出当前目录下的文件个数，但`cat`命令接收的参数为文件</span></span><br></pre></td></tr></table></figure><h3 id="执行多条命令"><a href="#执行多条命令" class="headerlink" title="执行多条命令"></a>执行多条命令</h3><p>用<code>;</code>分隔一行内的多条命令，可以使这些命令按次序依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command1 ; command2 ; command3</span><br><span class="line"><span class="comment">#依次执行command1, command2, command3</span></span><br></pre></td></tr></table></figure><p>用<code>&amp;&amp;</code>分隔一行内的多条命令，可以使前面的所有命令均执行成功再执行后面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2 &amp;&amp; command3</span><br><span class="line"><span class="comment">#先执行command1，如成功则执行command2，否则退出</span></span><br><span class="line"><span class="comment">#command1和command2均执行成功才会执行command3</span></span><br></pre></td></tr></table></figure><p>用<code>||</code>分隔一行内的多条命令，可以使前面的所有命令中只要有一条执行成功则执行后面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command1 || command2 || command3</span><br><span class="line"><span class="comment">#先执行command1，如成功则执行command2，否则退出</span></span><br><span class="line"><span class="comment">#command1和command2只要有一条执行成功会执行command3</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>通常一条命令的参数中如过有空格，则该参数会被分为多个参数传递给命令。如需传递包含空格的参数，需使用单引号<code>‘</code>或双引号<code>&quot;</code>引起来。双引号中的字符串会被解析而单引号不会：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'HOME变量的值为$HOME'</span></span><br><span class="line"><span class="comment">#输出：HOME变量的值为$HOME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HOME变量的值为<span class="variable">$HOME</span>"</span></span><br><span class="line"><span class="comment">#输出：HOME变量的值为/home/zhiqing</span></span><br></pre></td></tr></table></figure><p>一对反引号(`)中可以包含一条命令，该处的内容会被命令的输出所代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date +%Y  <span class="comment">#输出当前年：2016</span></span><br><span class="line"><span class="built_in">echo</span> This year is `date +%Y`  <span class="comment">#输出：This year is 2016-07</span></span><br></pre></td></tr></table></figure><p><code>$(command)</code>有同样的功能，但是使用<code>$(command)</code>更好,因为它可以嵌套：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> This year is $(date +%Y)  <span class="comment">#输出：This year is 2016</span></span><br><span class="line"><span class="built_in">echo</span> This year is $(expr $(date +%Y) + 1)</span><br><span class="line"><span class="comment">#输出：This year is 2017</span></span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>有时候你想在参数中包含已被Shell使用的特殊符号，如<code>*</code>、<code>$</code>，这时可以使用转义符<code>\</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> a*  <span class="comment">#输出：apple applet app</span></span><br><span class="line"><span class="built_in">echo</span> a\*  <span class="comment">#输出：a*</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I live in <span class="variable">$HOME</span>"</span>  <span class="comment">#输出：I live in /home/zhiqing</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I live in \$HOME"</span>  <span class="comment">#输出：I live in $HOME</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>^V</code>(Ctrl + v)来转义控制字符，如在输入制表符(<code>tab</code>)之前按下<code>^V</code>，即可以把制表符输入参数中。</p><blockquote><p><code>tab</code>键的功能将在后面提到</p></blockquote><h3 id="Shell历史-History"><a href="#Shell历史-History" class="headerlink" title="Shell历史(History)"></a>Shell历史(History)</h3><p>通过Shell历史你可以重新执行你之前执行过的命令，常见的一些命令如下：</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>history</code></td><td>输出执行命令的历史记录</td></tr><tr><td><code>history N</code></td><td>输出最近N条记录</td></tr><tr><td><code>history -c</code></td><td>清除历史记录</td></tr><tr><td><code>!!</code></td><td>重新执行上一条命令</td></tr><tr><td><code>!N</code></td><td>重新执行在历史记录中的第N条命令</td></tr><tr><td><code>!-N</code></td><td>重新执行最近的第N条记录</td></tr><tr><td><code>!$</code></td><td>将上一条命令的最后一个参数作为当前命令的参数，如先执行<code>ls z*</code>，然后执行<code>rm !$</code>，此时的<code>rm !$</code>等同于<code>rm z*</code></td></tr><tr><td><code>!*</code></td><td>将上一条命令的所有参数作为当前命令的参数</td></tr></tbody></table><h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><p>如果你只记得命令或文件名的前几个字符，你可以通过按<code>tab</code>键来进行自动补全：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">ls un&lt;Tab&gt;&lt;Tab&gt;  </span><br><span class="line"><span class="comment">#系统将会显示出/usr/bin目录下所有以un开头的文件</span></span><br></pre></td></tr></table></figure><h2 id="Sehll工作控制"><a href="#Sehll工作控制" class="headerlink" title="Sehll工作控制"></a>Sehll工作控制</h2><ul><li><code>jobs</code> 列出工作列表</li><li><code>&amp;</code> 在后台运行一个工作</li><li><code>^Z</code> 暂停当前前台工作</li><li><code>suspend</code> 暂停一个shell</li><li><code>fg</code> 恢复一个工作并将其显示到前台</li><li><code>bg</code> 让一个已暂停的工作在后台运行</li></ul><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h3><p>这是一个内置命令，用于显示当前shell上的工作列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#[1]-  Running       emacs myfile &amp;</span></span><br><span class="line"><span class="comment">#[2]+  Stopping      shh exaple.com</span></span><br></pre></td></tr></table></figure><p>左边方括号中的整数为工作编号，旁边的加号和减号用于区别是前台工作还是后台工作。</p><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>将<code>&amp;</code>符号放在命令行之后，即可以让该命令在后台运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emacs myfile &amp;</span><br><span class="line"><span class="comment">#输出 [2] 28090</span></span><br></pre></td></tr></table></figure><p>返回的结果包括工作编号(2)和命令的进程号(28090)。</p><h3 id="Z"><a href="#Z" class="headerlink" title="^Z"></a>^Z</h3><p>当一个工作在前台运行时，按下<code>^Z</code>会使工作停止暂停，但是状态不变（前台/后台）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sleep 10  <span class="comment">#等待10秒</span></span><br><span class="line">^Z</span><br><span class="line"><span class="comment">#输出：[1]+ Stopped        sleep 10</span></span><br></pre></td></tr></table></figure><p>现在你可以输入<code>bg</code>使该工作在后台运行，或者输入<code>fg</code>使该工作恢复到前台运行。当然，你也可以不管该命令而继续执行其他命令。</p><h3 id="suspend"><a href="#suspend" class="headerlink" title="suspend"></a>suspend</h3><p><code>suspend</code>是一个内置命令，用于暂停当前shell，就像在当前shell中按<code>^Z</code>。比如当你用<code>sudo</code>命令启动了一个超级用户shell，而你又想返回原shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line"><span class="comment">#zhiqing</span></span><br><span class="line">sudo bash</span><br><span class="line"><span class="comment">#Password: *******</span></span><br><span class="line">whoami</span><br><span class="line"><span class="comment">#root</span></span><br><span class="line"><span class="built_in">suspend</span></span><br><span class="line"><span class="comment">#[1]+  Stopped        sudo bash</span></span><br><span class="line">whoami</span><br><span class="line"><span class="comment">#zhiqing</span></span><br></pre></td></tr></table></figure><h3 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h3><p><code>bg</code>命令可以使一个已暂停的命令在后台继续运行。如果没有参数则运行最近暂停的一个工作。如果需要指定一项明确的工作，则在工作编号前加上百分号传给<code>bg</code>命令作为参数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> %2</span><br></pre></td></tr></table></figure><p>一些交互型的程序不支持在后台运行，你可以使用<code>fg</code>命令使它们在前台运行。</p><h3 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h3><p><code>fg</code>命令可以使一个已暂停的命令在前台继续运行。如果没有参数则通常运行最近暂停的一个工作或在在后台运行的工作。如果需要指定一项明确的工作，则在工作编号前加上百分号传给<code>bg</code>命令作为参数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fg</span> %2</span><br></pre></td></tr></table></figure><h2 id="结束一条命令"><a href="#结束一条命令" class="headerlink" title="结束一条命令"></a>结束一条命令</h2><p>可以使用<code>^C</code>结束一条正在shell前台运行的命令.如果你想结束一条在后台运行的工作，可以使用<code>fg</code>命令使它在前台运行，然后按<code>^C</code>结束该工作。</p><blockquote><p>另一种选择是使用<code>kill</code>命令。</p></blockquote><h2 id="退出Shell"><a href="#退出Shell" class="headerlink" title="退出Shell"></a>退出Shell</h2><p>可以使用<code>exit</code>命令或者按<code>^D</code>键退出当前shell。</p><h2 id="定制Shell"><a href="#定制Shell" class="headerlink" title="定制Shell"></a>定制Shell</h2><p>你可以定制你自己的shell一边更好的使用或工作。你可以在你的家目录找到并编辑<code>.bash_profile</code>或<code>.bashrc</code>来达到定制shell。它们可以定义变量或别名、运行程序、打印你的星座运势或者是任何你想做的事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Linux操作系统时，通常是在一个叫Shell的东西里输入命令然后敲入回车，从而让Linux执行相应的程序。比如在Shell中输入&lt;code&gt;who&lt;/code&gt;然后敲入回车，系统将会输出有哪些用户在什么地方登录了该计算机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="http://blog.zhiqing.info/categories/Linux/"/>
    
    
      <category term="Code" scheme="http://blog.zhiqing.info/tags/Code/"/>
    
      <category term="Linux" scheme="http://blog.zhiqing.info/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.zhiqing.info/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>《Linux pocket guide》读书笔记之一：文件系统</title>
    <link href="http://blog.zhiqing.info/2016/07/19/linux-pocket-guide-1/"/>
    <id>http://blog.zhiqing.info/2016/07/19/linux-pocket-guide-1/</id>
    <published>2016-07-18T16:00:00.000Z</published>
    <updated>2018-01-08T12:44:08.672Z</updated>
    
    <content type="html"><![CDATA[<p>linux中文件系统为树形结构，并用/分隔，例：<code>/home/zhiqing</code>表示根目录下的home目录中的zhiqing文件夹</p><ul><li>根目录：<code>/</code>（绝对路径以/开头）</li><li>家目录：<code>～</code>，例：<code>～/Documents</code>代表<code>/home/username/Documents</code></li><li>父目录：<code>..</code>，例：<code>../file</code>代表上一级目录下的file文件</li></ul><h2 id="家目录"><a href="#家目录" class="headerlink" title="家目录"></a>家目录</h2><p>普通用户的家目录为<code>/home/username</code>，超级用户（root）的家目录为<code>/root</code></p><p>常用操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$HOME</span>  <span class="comment">#显示当前用户的家目录</span></span><br><span class="line"><span class="built_in">echo</span> ~  <span class="comment">#同上</span></span><br><span class="line"><span class="built_in">cd</span> ~/Documents  <span class="comment">#进入当前用户家目录中的Documents文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ~zhiqing  <span class="comment">#进入用户zhiqing的家目录</span></span><br></pre></td></tr></table></figure><h2 id="系统目录"><a href="#系统目录" class="headerlink" title="系统目录"></a>系统目录</h2><p>系统目录大致分为三部分：<code>/Scope(域)/Category(分类)/Application(应用)</code>。例如：<code>/usr/local/share/emacs</code>，其中<code>usr/local</code>为Scope，<code>share</code>为Category，<code>emacs</code>为Application。</p><h3 id="Category（分类）"><a href="#Category（分类）" class="headerlink" title="Category（分类）"></a>Category（分类）</h3><p>分类通常指明了目录的类型，比如目录名为<code>bin</code>则代表该目录下存放的是可执行文件。常见分类如下：</p><ul><li>程序类<ul><li><code>bin</code> 程序的二进制文件（可执行文件）</li><li><code>sbin</code> 程序的二进制文件（通常需要root权限）</li><li><code>lib</code> 程序的库文件</li></ul></li><li>文档类<ul><li><code>doc</code> 文档</li><li><code>info</code> emacs的内置文档</li><li><code>man</code> 提供给<code>man</code>命令显示的文档</li><li><code>share</code> 程序的特殊文件，如安装说明</li></ul></li><li>配置类<ul><li><code>etc</code> 系统的配置文件和和各种其他的配置文件</li><li><code>init.d</code> linux启动相关的配置文件</li><li><code>rc.d</code> linux启动相关配置文件，按级别分类，如：rc1.d,rc2.d,…</li></ul></li><li>编程类<ul><li><code>include</code> 头文件</li><li><code>src</code> 程序源文件</li></ul></li><li>网站类<ul><li><code>cgi-bin</code> 网站运行时的脚本或程序</li><li><code>html</code> 网页文件</li><li><code>public_html</code> 网页文件，通常存在与用户家目录</li><li><code>www</code> 网页文件</li></ul></li><li>硬件类<ul><li><code>dev</code> 磁盘或其他硬件的接口设备文件</li><li><code>media</code> 挂载点：连接到外部磁盘</li><li><code>mnt</code> 挂载点：链接到外部磁盘</li></ul></li><li>运行时类<ul><li><code>lock</code> 锁文件</li><li><code>log</code> 日志文件，包括错误、警告和提示信息</li><li><code>run</code> PID文件</li><li><code>tmp</code> 零时文件</li><li><code>proc</code> 操作系统的状态</li></ul></li></ul><h3 id="Scope（域）"><a href="#Scope（域）" class="headerlink" title="Scope（域）"></a>Scope（域）</h3><p>域通常包含了目录的描述</p><ul><li><code>/</code> linux的系统文件</li><li><code>/usr</code> 更多的linux系统文件</li><li><code>/usr/local</code> 为组织或个人开发的本地化的系统文件</li><li><code>/usr/games</code> 游戏</li></ul><p>一个分类会出现在多个域中，例如：<code>/lib</code>、<code>/usr/lib</code>、<code>/usr/local/lib</code>和<code>/usr/games/lib</code>可能会同时存在。</p><h3 id="Application（应用）"><a href="#Application（应用）" class="headerlink" title="Application（应用）"></a>Application（应用）</h3><p>应用部分通常为程序名。系统目录中，在Scope和Category之后，每个应用都会有一个自己的子文件夹（如：<code>/usr/local/doc/myprogram</code>）用于存放自己需要的文件。</p><h2 id="操作系统目录"><a href="#操作系统目录" class="headerlink" title="操作系统目录"></a>操作系统目录</h2><p>操作系统目录是保证系统内核运行的目录，最少要包含以下几个目录：</p><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td><code>/boot</code></td><td>存放系统启动相关的文件，Linux内核(kernel)一般存放在<code>/boot/vmlinuz</code>或类似的目录中。</td></tr><tr><td><code>/lost+found</code></td><td>用于磁盘修复工具恢复已损坏文件</td></tr><tr><td><code>/proc</code></td><td>系统中正在运行的进程的描述</td></tr></tbody></table><p><code>/proc</code> 目录中的文件显示的是正在运行的内核和一些特殊的配置信息。它们的大小总是为0、修改时间为现在，并且权限为只读(-r–r–r–)。常见文件如下：</p><table><thead><tr><th>文件</th><th>含义</th></tr></thead><tbody><tr><td><code>/proc/ioports</code></td><td>计算机中IO设备的列表</td></tr><tr><td><code>/proc/cpuinfo</code></td><td>CPU的信息</td></tr><tr><td><code>/proc/version</code></td><td>操作系统的版本，同<code>uname</code>命令显示的内容</td></tr><tr><td><code>/proc/uptime</code></td><td>系统运行时间</td></tr></tbody></table><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><p>linux中的权限包括：读(read)、写(write)、执行(execute)</p><ul><li>读：读取文件内容、显示目录中的文件</li><li>写：修改或删除文件、创建或删除目录</li><li>执行：运行脚本或二进制文件、进入目录</li></ul><p>执行<code>ls -l file</code>命令，每条记录前10个字符即为该文件的权限。表现形式类似：<code>-rwxr-x---</code>。解释如下：</p><table><thead><tr><th>位数</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>文件类型（-为文件，d为目录，l为链接，p为管道，c为字符设备，b为块设备）</td></tr><tr><td>2-4</td><td>文件所有者的读、写、执行权限（为-则表示没有该权限）</td></tr><tr><td>5-7</td><td>文件所在组的读、写、执行权限</td></tr><tr><td>8-10</td><td>其他用户的读、写、执行权限</td></tr></tbody></table><p>所以<code>-rwxr-x---</code>表示<code>file</code>是一个文件，该文件的所有者可以读、写、执行，该文件所所在组的用户可以读和执行，其他用户不能读、写和执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux中文件系统为树形结构，并用/分隔，例：&lt;code&gt;/home/zhiqing&lt;/code&gt;表示根目录下的home目录中的zhiqing文件夹&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根目录：&lt;code&gt;/&lt;/code&gt;（绝对路径以/开头）&lt;/li&gt;
&lt;li&gt;家目录：&lt;code&gt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://blog.zhiqing.info/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://blog.zhiqing.info/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux/"/>
    
    
      <category term="Code" scheme="http://blog.zhiqing.info/tags/Code/"/>
    
      <category term="Linux" scheme="http://blog.zhiqing.info/tags/Linux/"/>
    
      <category term="《Linux pocket guide》" scheme="http://blog.zhiqing.info/tags/%E3%80%8ALinux-pocket-guide%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://blog.zhiqing.info/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
